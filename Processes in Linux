A zombie process is a process whose execution is completed but it still has an entry in the process table. 
Zombie processes usually occur for child processes, as the parent process still needs to read its child’s exit status. 
Once this is done using the wait system call, the zombie process is eliminated from the process table. This is known as reaping the zombie process.

# Salient points of Zombie Processes
- All the memory and resources allocated to a process are deallocated when the process terminates using the exit() system call. 
But the process’s entry in the process table is still available. This process is now a zombie process.
- The exit status of the zombie process zombie process can be read by the parent process using the wait() system call. 
After that, the zombie process is removed from the system. Then the process ID and the process table entry of the zombie process can be reused.
- If the parent process does not use the wait() system call, the zombie process is left in the process table. This creates a resource leak.
- If the parent process is not running anymore, then the presence of a zombie process indicates an operating system bug. 
This may not be a serious problem if there are a few zombie processes but under heavier loads, 
this can create issues for the system such as running out of process table entries.
- The zombie processes can be removed from the system by sending the SIGCHLD signal to the parent, using the kill command. 
If the zombie process is still not eliminated from the process table by the parent process, then the parent process is terminated if that is acceptable.

# Dangers of Zombie Processes
- Zombie processes don't use any system resources but they do retain their process ID. 
If there are a lot of zombie processes, then all the available process ID’s are monopolized by them. 
This prevents other processes from running as there are no process ID’s available.
- The presence of zombie processes also indicates an operating system bug if their parent processes are not running anymore. 
This is not a serious problem if there are a few zombie processes but under heavier loads, this can create issues for the system.

# Killing Zombie Processes
Zombie processes can be killed by sending the SIGCHLD signal to the parent, using the kill command. 
This signal informs the parent process to clean up the zombie process using the wait() system call. This signal is sent with the kill command. 
kill -s SIGCHLD pid

# Orphan Processes
Orphan processes are those processes that are still running even though their parent process has terminated or finished. 
-- A process can be orphaned intentionally or unintentionally.
- An intentionally orphaned process runs in the background without any manual support. 
This is usually done to start an indefinitely running service or to complete a long-running job without user attention.
- An unintentionally orphaned process is created when its parent process crashes or terminates. 
Unintentional orphan processes can be avoided using the process group mechanism.

# Daemon Process
- A daemon process is a background process that is not under the direct control of the user. 
This process is usually started when the system is bootstrapped and it terminated with the system shut down.
- Usually the parent process of the daemon process is the init process. 
This is because the init process usually adopts the daemon process after the parent process forks the daemon process and terminates.

--The daemon process names normally end with a d. Some of the examples of daemon processes in Unix are −

crond
This is a job scheduler that runs jobs in the background.

syslogd
This is the system logger that implements the system logging facility and collects system messages.

httpd
This is the web server daemon process that handles the Hypertext Transfer Protocol.

dhcpd
This daemon configures the TCP/IP information for users dynamically.

# Process Management:

Processes are started in user space

Process is an abstraction of running program

Process includes set of resources, like open files, pending signals, internal kernel data, state, address space

Threads are units of running program, they are within processes

Threads do not have their own process space and other resources but use process’s. Resources

System calls used by processes to create child and pother processes:

fork(): create new process by duplicating the existing process. This is used to create child process where the existing process becomes parent process
Exec(): it replaces the current process with new program. Here as no new process created, it uses same PID
vfork(): it is similar to fork, however in vfork() parent is temp suspended until child process completes which doesn’t happen in fork
system(): It uses fork() command’s variation. To create child process
clone(): they are like fork but they allow child to share execution context with parent who calls it. 
wait() system call suspends execution of the current process until one of its children terminates.
waitpid() system call suspends execution of the current process until a child specified by pid argument has changed state.
Like memory space, table of Giles descriptions and table of signal handlers. vfork() is faster the fork()
Kernel stores all the process in a doubly linked list which stores all the data about process. Each element is called process descriptor in this list

Process state:

Existing task calls fork() and starts new process
Task is forked and goes in task running state where it gets ready but is not running
Scheduler calls context switch to run task, if it can finish right away, task exits and goes in zombie state
If task needs another event to finish, it goes in interrupt state where it waits for specific event to finish and goes back to step 2  Kthread:
Similar to thread but only runs in kernel space
They do not context switch in user space like normal threads would
kthread do not have address space as they run already in address space.
