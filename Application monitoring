Application request Count by status code
  Informational responses (100–199)
  Successful responses (200–299)
  Redirects (300–399)
  Client errors (400–499)
  Server errors (500–599)
  
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status  

200 OK
The request has succeeded and processing of our request is done. The response is the final payload and the service will not take further actions. 

202 Accepted
202 response status code indicates that the request has been accepted for processing, 
but the processing has not been completed; in fact, processing may not have started yet. 
It is intended for cases where another process or server handles the request, or for batch processing.

204 No Content
There is no content to send for this request, but the headers may be useful. 
The user-agent may update its cached headers for this resource with the new ones.

302 Found
This response code means that the URI of requested resource has been changed temporarily. 
Further changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.

URI stands for Uniform Resource Identifier, and it's the official name for those things you see all the time on the Web that begin 
' http: ' or ' mailto: ', for example http://www.w3.org/ , which is the URI for the home page of the World Wide Web consortium.

304 Not Modified
This is used for caching purposes. It tells the client that the response has not been modified, 
so the client can continue to use the same cached version of the response.

307 Temporary Redirect
The server sends this response to direct the client to get the requested resource at another URI with same method that was used in the prior request. 
This has the same semantics as the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: 
If a POST was used in the first request, a POST must be used in the second request.

308 Permanent Redirect
This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. 
This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: 
If a POST was used in the first request, a POST must be used in the second request.

400 Bad Request
400 response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error 
(e.g., malformed request syntax, invalid request message framing, or deceptive request routing).

401 Unauthorized
Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". 
That is, the client must authenticate itself to get the requested response.

403 Forbidden
The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. 
Unlike 401, the client's identity is known to the server.

404 Not Found
The server can not find the requested resource. In the browser, this means the URL is not recognized. 
In an API, this can also mean that the endpoint is valid but the resource itself does not exist. 
Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. 

408 Request Timeout
This response is sent on an idle connection by some servers, even without any previous request by the client. 
It means that the server would like to shut down this unused connection. 
This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. 

500 Internal Server Error
500 server error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
This error response is a generic "catch-all" response. Usually, this indicates the server cannot find a better 5xx error code to response. 

502 Bad Gateway
This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.

503 Service Unavailable
The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. 
Note that together with this response, a user-friendly page explaining the problem should be sent. 
This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, 
contain the estimated time before the recovery of the service. 
The webmaster must also take care about the caching-related headers that are sent along with this response, 
as these temporary condition responses should usually not be cached.


# Latency measures the delay between an action and a response. Over the Internet, individual delays at the application 
or packet level can accumulate, as each element in the chain of communication is linked to others.

For your API to be considered real time, the latency at the intersection needs to be less than 30ms

Kafka deployment and the workload it handles:
- Dozens of billions messages/day (per cluster)
- Dozens of brokers (per cluster)
- Thousands of partitions (primary)
- Multiple production clusters per region
- Multi-region
- No cross-region replication

 Filebeat to transfer logs
The most important log file is the server.log file, where the errors and information about 
partitions, leadership, and other interesting information can be found.

Key Kafka metrics to monitor From our perspective, we have found the following topics to be most helpful in monitoring Kafka:
- Messages in/out
- Network handler idle time
- Request handler idle time
- Under-Replicated partitions
- Leader Elections
- CPU idle time
- Host Network in/out

